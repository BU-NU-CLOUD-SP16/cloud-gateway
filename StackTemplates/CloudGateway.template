{
  "Description" : "Example CloudFormation Stack",

  "Parameters" : {
    "KeyPair": {
      "Description" : "Name of an existing EC2 KeyPair to enable SSH access to the instance",
      "Default" : "vpc-virginia-1802",
      "Type": "String"
    },

    "InstanceType" : {
      "Type" : "String",
      "Default" : "t2.micro",
      "Description" : "EC2 instance type, e.g. m1.small, m1.large, etc."
    },

    "ImageId" : {
      "Type" : "String",
      "Default" : "ami-fce3c696",
      "Description" : "we use Ubuntu Server 14.04 LTS (HVM), SSD Volume Type "
    },

    "VpcCidr" : {
      "Type" : "String",
      "Default" : "10.0.0.0/16"
    },

    "PublicSubnetCidr" : {
      "Type" : "String",
      "Default" : "10.0.0.0/24"
    },

    "PrivateSubnetCidr" : {
      "Type" : "String",
      "Default" : "10.0.1.0/24"
    },

    "VcgID" : {
      "Type" : "String",
      "Default" : "remote vcg"
    },

    "VcgPrivateIP" : {
      "Type" : "String",
      "Default" : "10.0.0.100"
    },

    "hqIp" : {
      "Type" : "String",
      "Default" : "?????",
      "Description" : "public IP of head quarter"

    },

    "hqPsk" : {
      "Type" : "String",
      "Default" : "secret1",
      "Description" : "PSK between this cloud and head quarter"   
    }
  },


  "Resources" : {
    "VPC" : {
      "Type" : "AWS::EC2::VPC",
      "Properties" : {
        "CidrBlock" : {"Ref" : "VpcCidr"},
        "EnableDnsSupport" : "true",
        "EnableDnsHostnames" : "true"
      }
    },


    "PublicSubnet" : {
      "Type" : "AWS::EC2::Subnet",
      "DependsOn": ["VPC"],
      "Properties" : {
        "VpcId" : { "Ref" : "VPC" },
        "CidrBlock" : { "Ref" : "PublicSubnetCidr" }
      }
    },  

    "PrivateSubnet" : {
      "Type" : "AWS::EC2::Subnet",
      "DependsOn": ["VPC"],

      "Properties" : {
        "VpcId" : { "Ref" : "VPC" },
        "CidrBlock" : { "Ref" : "PrivateSubnetCidr" }
      }
    },  


    "SecurityGroup" : {
       "Type" : "AWS::EC2::SecurityGroup",
       "DependsOn": ["VPC"],
       "Properties" : {
          "GroupDescription" : "Allow all traffic",
          "VpcId" : {"Ref" : "VPC"},
          "SecurityGroupIngress" : [{
                "IpProtocol" : "-1",
                "FromPort" : "-1",
                "ToPort" : "-1",
                "CidrIp" : "0.0.0.0/0"
             }],
          "SecurityGroupEgress" : [{
             "IpProtocol" : "-1",
             "FromPort" : "-1",
             "ToPort" : "-1",
             "CidrIp" : "0.0.0.0/0"
          }]
       }
    },     

    "Vcg": {
      "Type": "AWS::EC2::Instance",
      "DependsOn": ["MyEIP", "PublicSubnet", "SecurityGroup"],

      "Metadata" : {
        "AWS::CloudFormation::Init" : {
          "config" : {
            "files" : {
              "/etc/ipsec.conf" : {
                "content" : { "Fn::Join" : [ "", ["config setup", "\n",
                                                  "conn %default", "\n",
                                                    "ikelifetime=60m", "\n",
                                                    "keylife=20m", "\n",
                                                    "rekeymargin=3m", "\n",
                                                    "keyingtries=1", "\n",
                                                    "authby=secret", "\n",
                                                    "keyexchange=ikev2", "\n",
                                                    "mobike=no", "\n",

                                                  "conn pass", "\n",
                                                    "rightsubnet=",
                                                      { "Ref" : "PrivateSubnet" }, { "Ref" : "hqIp" }, "/32", "\n",
                                                    "type=passthrough", "\n",
                                                    "authby=never", "\n",
                                                    "auto=route", "\n",

                                                  "conn to-headquarter", "\n",
                                                    "auto=start", "\n",
                                                    "rightid=", { "Ref" : "hqIp" }, "\n",
                                                    "right=", { "Ref" : "hqIp" }, "\n",
                                                    "rightsubnet=0.0.0.0/0", "\n",
                                                    "leftid=",
                                                      { "Ref" : "VcgID"}, "\n",
                                                    "left=",
                                                      { "Ref" : "VcgPrivateIP" }, "\n",
                                                    "leftsubnet=",
                                                      { "Ref" : "PrivateSubnetCidr" }, "\n"]]},                
                "mode"  : "000777",
                "owner" : "root",
                "group" : "root"
              },

              "/etc/ipsec.secrets" : {
                "content" : { "Fn::Join" : [ "", [{"Ref" : "VcgID"}, " ",
                                                  {"Ref" : "hqIp"}, ":", " ",
                                                  "\"", {"Ref" : "hqPsk"}, "\"" ]]},
                "mode"  : "000777",
                "owner" : "root",
                "group" : "root"
              }
            },

            "commands" : {
                "1": { "command" : { "Fn::Join" : [ " ", ["sudo for path in /proc/sys/net/ipv4/conf/*;",
                                                          "do echo 0 > $path/accept_redirects;",
                                                          "echo 0 > $path/send_redirects;",
                                                          "done"]]}},
                "2": { "command" : "sudo echo net.ipv4.ip_forward = 1 >> /etc/sysctl.conf"},
                "3": { "command" : "sudo echo net.ipv4.conf.all.accept_redirects = 0 >> /etc/sysctl.conf"},
                "4": { "command" : "sudo echo net.ipv4.conf.all.send_redirects = 0 >> /etc/sysctl.conf"},
                "5": { "command" : "sudo echo 1 > /proc/sys/net/ipv4/ip_forward"},
                "5": { "command" : "sudo sysctl -p"}
            }
          }
        }
      },

      "Properties": {
        "ImageId" : { "Ref" : "ImageId" },
        "InstanceType" : { "Ref" : "InstanceType" },
        "KeyName" : { "Ref": "KeyPair" },

        "SourceDestCheck" : "false",

        "NetworkInterfaces" : [{
          "GroupSet"                 : [{ "Ref" : "SecurityGroup" }],
          "PrivateIpAddress"         : {"Ref" : "VcgPrivateIP"},
          "AssociatePublicIpAddress" : "true",
          "DeviceIndex"              : "0",
          "DeleteOnTermination"      : "true",
          "SubnetId"                 : { "Ref" : "PublicSubnet" }
        }],
        
        "UserData": {
         "Fn::Base64": { "Fn::Join":["", [
            "#!/bin/bash -ex\n",

            "apt-get update\n",
            "apt-get -y install strongswan\n",
            "apt-get -y install libffi-dev libssl-dev\n",
            "apt-get -y install python-setuptools\n",
            "easy_install pyopenssl ndg-httpsclient pyasn1\n",

            "mkdir aws-cfn-bootstrap-latest\n",
            "curl https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz | tar xz -C aws-cfn-bootstrap-latest --strip-components 1\n",
            "easy_install aws-cfn-bootstrap-latest\n",

            "# Install the files and packages from the metadata\n",
            "/usr/local/bin/cfn-init ",
            "         --stack ", { "Ref" : "AWS::StackName" },
            "         --resource Vcg ",
            "         --region ", { "Ref" : "AWS::Region" }, "\n",

            "# Signal the status from cfn-init\n",
            "/usr/local/bin/cfn-signal -e $? ",
            "         --stack ", { "Ref" : "AWS::StackName" },
            "         --resource Vcg ",
            "         --region ", { "Ref" : "AWS::Region" }, "\n"
         ]]}}
      }
    },

    "IGW" : {
      "Type" : "AWS::EC2::InternetGateway",
      "DependsOn": ["VPC"],
      "Properties" : {}
    },

    "attachIGW" : {
       "Type" : "AWS::EC2::VPCGatewayAttachment",
       "DependsOn": ["VPC", "IGW"],

       "Properties" : {
          "VpcId" : { "Ref" : "VPC" },
          "InternetGatewayId" : { "Ref" : "IGW" }
       }
    },


    "PublicRouteTable" : {
      "Type" : "AWS::EC2::RouteTable",
      "DependsOn": ["VPC"],
      "Properties" : {
        "VpcId" : {"Ref" : "VPC"}
      }
    },

    "igwRoute" : {
      "Type" : "AWS::EC2::Route",
      "DependsOn": ["IGW", "attachIGW"],
      "Properties" : {
        "RouteTableId" : { "Ref" : "PublicRouteTable" },
        "DestinationCidrBlock" : "0.0.0.0/0",
        "GatewayId" : { "Ref" : "IGW" }
      }
    },

    "assignPublicRouteTable" : {
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
      "DependsOn": ["igwRoute", "PublicRouteTable"],
      "Properties" : {
        "SubnetId" : { "Ref" : "PublicSubnet" },
        "RouteTableId" : { "Ref" : "PublicRouteTable" }
      }
    },


    "PrivateRouteTable" : {
      "Type" : "AWS::EC2::RouteTable",
      "DependsOn": ["VPC"],
      "Properties" : {
        "VpcId" : {"Ref" : "VPC"}
      }
    },

    "vcgRoute" : {
      "Type" : "AWS::EC2::Route",
      "DependsOn": ["Vcg"],
      "Properties" : {
        "RouteTableId" : { "Ref" : "PrivateRouteTable" },
        "DestinationCidrBlock" : "0.0.0.0/0",
        "InstanceId" : { "Ref" : "Vcg" }
      }
    },

    "assignPrivateRouteTable" : {
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
      "DependsOn": ["vcgRoute", "PrivateRouteTable"],
      "Properties" : {
        "SubnetId" : { "Ref" : "PrivateSubnet" },
        "RouteTableId" : { "Ref" : "PrivateRouteTable" }
      }
    }
  },

  "Outputs" : {
    "This VCG ID" : {
      "Description" : "The id used for this vcg",
      "Value" : { "Fn::GetAtt" : [ "MyEIP", "AllocationId" ] }
    },
    "Region" : {
      "Description" : "Region where resources are provisioned",
      "Value" : { "Ref" : "AWS::Region" }
    },
    "Vcg PublicIP" : {
      "Description" : "Public IP address of the newly created EC2 instance",
      "Value" : { "Fn::GetAtt" : [ "Vcg", "PublicIp" ] }
    },
  }
}


